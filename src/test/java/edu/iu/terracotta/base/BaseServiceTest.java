package edu.iu.terracotta.base;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyBoolean;
import static org.mockito.ArgumentMatchers.anyInt;
import static org.mockito.ArgumentMatchers.anyList;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.ArgumentMatchers.anyMap;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.when;

import java.util.Collections;
import java.util.Optional;
import java.util.UUID;

import org.mockito.Mock;
import org.springframework.http.HttpHeaders;

import edu.iu.terracotta.connectors.canvas.service.api.impl.CanvasApiClientImpl;
import edu.iu.terracotta.connectors.canvas.service.api.impl.CanvasApiJwtServiceImpl;
import edu.iu.terracotta.connectors.canvas.service.extended.AssignmentReaderExtended;
import edu.iu.terracotta.connectors.canvas.service.extended.AssignmentWriterExtended;
import edu.iu.terracotta.connectors.canvas.service.extended.impl.CanvasApiFactoryExtended;
import edu.iu.terracotta.connectors.canvas.service.lms.impl.CanvasLmsOAuthServiceImpl;
import edu.iu.terracotta.connectors.canvas.service.lti.advantage.impl.CanvasAdvantageAgsServiceImpl;
import edu.iu.terracotta.connectors.generic.dao.entity.api.ApiOAuthSettings;
import edu.iu.terracotta.connectors.generic.dao.entity.lti.LtiContextEntity;
import edu.iu.terracotta.connectors.generic.dao.entity.lti.LtiUserEntity;
import edu.iu.terracotta.connectors.generic.dao.entity.lti.PlatformDeployment;
import edu.iu.terracotta.connectors.generic.dao.model.SecuredInfo;
import edu.iu.terracotta.connectors.generic.dao.model.lms.LmsAssignment;
import edu.iu.terracotta.connectors.generic.dao.model.lti.ApiToken;
import edu.iu.terracotta.connectors.generic.dao.model.lti.LtiToken;
import edu.iu.terracotta.connectors.generic.dao.model.lti.ags.LineItem;
import edu.iu.terracotta.connectors.generic.dao.model.lti.ags.LineItems;
import edu.iu.terracotta.connectors.generic.exceptions.helper.ExceptionMessageGenerator;
import edu.iu.terracotta.connectors.generic.service.api.ApiJwtService;
import edu.iu.terracotta.connectors.generic.service.api.ApiClient;
import edu.iu.terracotta.connectors.generic.service.api.ApiScopeService;
import edu.iu.terracotta.connectors.generic.service.connector.ConnectorService;
import edu.iu.terracotta.connectors.generic.service.lms.LmsOAuthService;
import edu.iu.terracotta.connectors.generic.service.lti.LtiDataService;
import edu.iu.terracotta.connectors.generic.service.lti.LtiJwtService;
import edu.iu.terracotta.connectors.generic.service.lti.advantage.AdvantageAgsService;
import edu.iu.terracotta.connectors.generic.service.lti.advantage.AdvantageConnectorHelper;
import edu.iu.terracotta.connectors.generic.service.lti.advantage.AdvantageMembershipService;
import edu.iu.terracotta.dao.entity.Assessment;
import edu.iu.terracotta.dao.entity.Assignment;
import edu.iu.terracotta.dao.entity.ConsentDocument;
import edu.iu.terracotta.dao.entity.Experiment;
import edu.iu.terracotta.dao.entity.Participant;
import edu.iu.terracotta.dao.entity.Question;
import edu.iu.terracotta.dao.entity.RegradeDetails;
import edu.iu.terracotta.dao.entity.Submission;
import edu.iu.terracotta.dao.entity.Treatment;
import edu.iu.terracotta.dao.entity.integrations.Integration;
import edu.iu.terracotta.dao.entity.integrations.IntegrationClient;
import edu.iu.terracotta.dao.entity.integrations.IntegrationConfiguration;
import edu.iu.terracotta.dao.model.dto.AnswerDto;
import edu.iu.terracotta.dao.model.dto.QuestionDto;
import edu.iu.terracotta.dao.model.dto.dashboard.results.outcomes.request.ResultsOutcomesRequestDto;
import edu.iu.terracotta.dao.model.dto.integrations.IntegrationClientDto;
import edu.iu.terracotta.dao.model.dto.integrations.IntegrationConfigurationDto;
import edu.iu.terracotta.dao.model.dto.integrations.IntegrationDto;
import edu.iu.terracotta.service.app.AnswerService;
import edu.iu.terracotta.service.app.AnswerSubmissionService;
import edu.iu.terracotta.service.app.AssessmentService;
import edu.iu.terracotta.service.app.AssessmentSubmissionService;
import edu.iu.terracotta.service.app.AssignmentService;
import edu.iu.terracotta.service.app.AssignmentTreatmentService;
import edu.iu.terracotta.service.app.ExperimentService;
import edu.iu.terracotta.service.app.ExposureService;
import edu.iu.terracotta.service.app.FileStorageService;
import edu.iu.terracotta.service.app.GroupParticipantService;
import edu.iu.terracotta.service.app.GroupService;
import edu.iu.terracotta.service.app.OutcomeScoreService;
import edu.iu.terracotta.service.app.OutcomeService;
import edu.iu.terracotta.service.app.ParticipantService;
import edu.iu.terracotta.service.app.QuestionService;
import edu.iu.terracotta.service.app.QuestionSubmissionCommentService;
import edu.iu.terracotta.service.app.QuestionSubmissionService;
import edu.iu.terracotta.service.app.SubmissionService;
import edu.iu.terracotta.service.app.TreatmentService;
import edu.iu.terracotta.service.app.dashboard.results.ResultsOutcomesAverageGradeService;
import edu.iu.terracotta.service.app.dashboard.results.ResultsOutcomesService;
import edu.iu.terracotta.service.app.dashboard.results.ResultsOutcomesTimeOnTaskService;
import edu.iu.terracotta.service.app.dashboard.results.ResultsOverviewService;
import edu.iu.terracotta.service.app.integrations.IntegrationClientService;
import edu.iu.terracotta.service.app.integrations.IntegrationConfigurationService;
import edu.iu.terracotta.service.app.integrations.IntegrationLaunchParameterService;
import edu.iu.terracotta.service.app.integrations.IntegrationLaunchService;
import edu.iu.terracotta.service.app.integrations.IntegrationScoreAsyncService;
import edu.iu.terracotta.service.app.integrations.IntegrationScoreService;
import edu.iu.terracotta.service.app.integrations.IntegrationService;
import edu.iu.terracotta.service.app.integrations.IntegrationTokenService;
import edu.iu.terracotta.service.aws.AwsService;
import edu.iu.terracotta.service.caliper.CaliperService;
import edu.iu.terracotta.utils.lti.Lti3Request;
import edu.ksu.canvas.CanvasApiFactory;
import lombok.extern.slf4j.Slf4j;

@Slf4j
public class BaseServiceTest extends BaseRepositoryTest {

    @Mock protected AdvantageAgsService advantageAgsService;
    @Mock protected AdvantageConnectorHelper advantageConnectorHelper;
    @Mock protected AdvantageMembershipService advantageMembershipService;
    @Mock protected AnswerService answerService;
    @Mock protected AnswerSubmissionService answerSubmissionService;
    @Mock protected ApiClient apiClient;
    @Mock protected ApiJwtService apiJwtService;
    @Mock protected ApiOAuthSettings apiOAuthSettings;
    @Mock protected AssessmentService assessmentService;
    @Mock protected AssessmentSubmissionService assessmentSubmissionService;
    @Mock protected AssignmentReaderExtended assignmentReaderExtended;
    @Mock protected AssignmentWriterExtended assignmentWriterExtended;
    @Mock protected AssignmentService assignmentService;
    @Mock protected AssignmentTreatmentService assignmentTreatmentService;
    @Mock protected AwsService awsService;
    @Mock protected CaliperService caliperService;
    @Mock protected CanvasAdvantageAgsServiceImpl canvasAdvantageAgsService;
    @Mock protected CanvasApiClientImpl canvasApiClient;
    @Mock protected CanvasApiFactory canvasApiFactory;
    @Mock protected CanvasApiFactoryExtended canvasApiFactoryExtended;
    @Mock protected CanvasApiJwtServiceImpl canvasApiJwtService;
    @Mock protected CanvasLmsOAuthServiceImpl canvasLmsOAuthService;
    @Mock protected ConnectorService<AdvantageAgsService> advantageAgsConnectorService;
    @Mock protected ConnectorService<ApiClient> apiClientConnectorService;
    @Mock protected ConnectorService<ApiJwtService> apiJwtConnectorService;
    @Mock protected ConnectorService<LmsOAuthService<ApiToken>> lmsOAuthConnectorService;
    @Mock protected ApiScopeService canvasAPIScopeService;
    @Mock protected ExceptionMessageGenerator exceptionMessageGenerator;
    @Mock protected ExperimentService experimentService;
    @Mock protected ExposureService exposureService;
    @Mock protected FileStorageService fileStorageService;
    @Mock protected GroupParticipantService groupParticipantService;
    @Mock protected GroupService groupService;
    @Mock protected IntegrationClientService integrationClientService;
    @Mock protected IntegrationConfigurationService integrationConfigurationService;
    @Mock protected IntegrationLaunchParameterService integrationLaunchParameterService;
    @Mock protected IntegrationLaunchService integrationLaunchService;
    @Mock protected IntegrationScoreAsyncService integrationScoreAsyncService;
    @Mock protected IntegrationScoreService integrationScoreService;
    @Mock protected IntegrationService integrationService;
    @Mock protected IntegrationTokenService integrationTokenService;
    @Mock protected LmsOAuthService<ApiToken> lmsOAuthService;
    @Mock protected LtiDataService ltiDataService;
    @Mock protected LtiJwtService ltiJwtService;
    @Mock protected OutcomeScoreService outcomeScoreService;
    @Mock protected OutcomeService outcomeService;
    @Mock protected ParticipantService participantService;
    @Mock protected QuestionService questionService;
    @Mock protected QuestionSubmissionCommentService questionSubmissionCommentService;
    @Mock protected QuestionSubmissionService questionSubmissionService;
    @Mock protected ResultsOutcomesAverageGradeService resultsOutcomesAverageGradeService;
    @Mock protected ResultsOutcomesService resultsOutcomesService;
    @Mock protected ResultsOverviewService resultsOverviewService;
    @Mock protected ResultsOutcomesTimeOnTaskService resultsOutcomesTimeOnTaskService;
    @Mock protected SubmissionService submissionService;
    @Mock protected TreatmentService treatmentService;

    public void setup() {
        try {
            super.setup();

            when(advantageAgsConnectorService.instance(any(PlatformDeployment.class), eq(AdvantageAgsService.class))).thenReturn(canvasAdvantageAgsService);
            when(advantageAgsService.getLineItems(any(LtiToken.class), any(LtiContextEntity.class))).thenReturn(lineItems);
            when(advantageAgsService.getToken(anyString(), any(PlatformDeployment.class))).thenReturn(ltiToken);
            when(advantageConnectorHelper.getToken(any(), anyString())).thenReturn(ltiToken);
            when(advantageConnectorHelper.createRestTemplate()).thenReturn(restTemplate);
            when(advantageConnectorHelper.createTokenizedRequestEntity(any(LtiToken.class))).thenReturn(httpEntity);
            when(advantageConnectorHelper.createTokenizedRequestEntity(any(LtiToken.class), any(LineItem.class))).thenReturn(lineItemHttpEntity);
            when(advantageConnectorHelper.createTokenizedRequestEntity(any(LtiToken.class), any(LineItems.class))).thenReturn(lineItemsHttpEntity);
            when(advantageConnectorHelper.nextPage(any(HttpHeaders.class))).thenReturn(null);
            when(advantageMembershipService.callMembershipService(any(LtiToken.class), any(LtiContextEntity.class))).thenReturn(courseUsers);
            when(advantageMembershipService.getToken(any(PlatformDeployment.class))).thenReturn(ltiToken);
            when(answerService.postAnswerMC(any(AnswerDto.class), anyLong())).thenReturn(answerDto);
            when(apiClient.createLmsAssignment(any(LtiUserEntity.class), any(Assignment.class), anyString())).thenReturn(lmsAssignment);
            when(apiClient.editAssignment(any(LtiUserEntity.class), any(LmsAssignment.class), anyString())).thenReturn(Optional.of(lmsAssignment));
            when(apiClient.listAssignment(any(LtiUserEntity.class), anyString(), anyString())).thenReturn(Optional.of(lmsAssignment));
            when(apiClient.listAssignments(any(LtiUserEntity.class), anyString())).thenReturn(Collections.singletonList(lmsAssignment));
            when(apiClient.listSubmissions(any(LtiUserEntity.class), anyString(), anyString())).thenReturn(Collections.singletonList(lmsSubmission));
            when(apiClientConnectorService.instance(any(PlatformDeployment.class), any())).thenReturn(canvasApiClient);
            when(apiJwtConnectorService.instance(any(PlatformDeployment.class), any(Class.class))).thenReturn(canvasApiJwtService);
            when(apiJwtService.isTestStudent(any(SecuredInfo.class))).thenReturn(false);
            when(apiJwtService.unsecureToken(anyString(), any(PlatformDeployment.class))).thenReturn(jwt);
            when(apiOAuthSettings.getPlatformDeployment()).thenReturn(platformDeployment);
            when(assessmentSubmissionService.calculateMaxScore(any(Assessment.class))).thenReturn(1F);
            when(assessmentSubmissionService.gradeSubmission(any(Submission.class), any(RegradeDetails.class))).thenReturn(submission);
            when(assignmentService.getLmsAssignmentById(anyString(), any(SecuredInfo.class))).thenReturn(Optional.of(lmsAssignment));
            when(assignmentService.save(any(Assignment.class))).thenReturn(assignment);
            when(assignmentTreatmentService.toAssignmentDto(any(Assignment.class), anyBoolean(), anyBoolean())).thenReturn(assignmentDto);
            when(assignmentTreatmentService.toTreatmentDto(any(Treatment.class), anyBoolean(), anyBoolean())).thenReturn(treatmentDto);
            when(canvasAdvantageAgsService.getLineItems(any(LtiToken.class), any(LtiContextEntity.class))).thenReturn(lineItems);
            when(canvasAdvantageAgsService.getToken(anyString(), any(PlatformDeployment.class))).thenReturn(ltiToken);
            when(canvasApiClient.checkAssignmentExists(any(LtiUserEntity.class), anyString(), anyString())).thenReturn(Optional.of(canvasAssignmentExtended));
            when(canvasApiClient.createLmsAssignment(any(LtiUserEntity.class), any(Assignment.class), anyString())).thenReturn(canvasAssignmentExtended);
            when(canvasApiClient.editAssignment(any(LtiUserEntity.class), any(LmsAssignment.class), anyString())).thenReturn(Optional.of(canvasAssignmentExtended));
            when(canvasApiClient.listAssignments(any(LtiUserEntity.class), anyString())).thenReturn(Collections.singletonList(canvasAssignmentExtended));
            when(canvasApiClient.listCoursesForUser(any(PlatformDeployment.class), anyString(), anyString())).thenReturn(Collections.singletonList(canvasCourseExtended));
            when(canvasApiClient.listSubmissions(any(LtiUserEntity.class), anyString(), anyString())).thenReturn(Collections.singletonList(canvasSubmissionExtended));
            when(canvasApiClient.restoreAssignment(any(Assignment.class))).thenReturn(canvasAssignmentExtended);
            when(canvasApiClient.uploadConsentFile(any(Experiment.class), any(ConsentDocument.class), any(LtiUserEntity.class))).thenReturn(canvasAssignmentExtended);
            when(canvasApiJwtService.buildJwt(anyBoolean(), any(Lti3Request.class))).thenReturn(JWT);
            when(canvasLmsOAuthService.isConfigured(any(PlatformDeployment.class))).thenReturn(true);
            when(canvasLmsOAuthService.getAccessToken(any(LtiUserEntity.class))).thenReturn(apiTokenEntity);
            when(groupParticipantService.getUniqueGroupByConditionId(anyLong(), anyString(), anyLong())).thenReturn(group);
            when(groupParticipantService.nextGroup(any(Experiment.class))).thenReturn(group);
            when(integrationClientService.fromDto(any(IntegrationClientDto.class))).thenReturn(integrationClient);
            when(integrationClientService.getAll()).thenReturn(Collections.singletonList(integrationClient));
            when(integrationClientService.toDto(any(IntegrationClient.class), anyString())).thenReturn(integrationClientDto);
            when(integrationClientService.toDto(anyList(), anyString())).thenReturn(Collections.singletonList(integrationClientDto));
            when(integrationConfigurationService.create(any(Integration.class), any(UUID.class))).thenReturn(integrationConfiguration);
            when(integrationConfigurationService.fromDto(any(IntegrationConfigurationDto.class), any(IntegrationConfiguration.class))).thenReturn(integrationConfiguration);
            when(integrationConfigurationService.toDto(any(IntegrationConfiguration.class))).thenReturn(integrationConfigurationDto);
            when(integrationConfigurationService.update(any(IntegrationConfigurationDto.class), any(Integration.class))).thenReturn(integrationConfiguration);
            when(integrationLaunchParameterService.buildQueryString(any(Submission.class), anyInt())).thenReturn("?a=1&b=2");
            when(integrationScoreService.getPreviewTokenClient(anyString())).thenReturn(Optional.of(INTEGRATION_CLIENT_NAME));
            when(integrationService.create(any(Question.class), any(UUID.class))).thenReturn(integration);
            when(integrationService.findByUuid(any(UUID.class))).thenReturn(integration);
            when(integrationService.fromDto(any(IntegrationDto.class), any(Integration.class))).thenReturn(integration);
            when(integrationService.toDto(any(Integration.class))).thenReturn(integrationDto);
            when(integrationService.toDto(anyList())).thenReturn(Collections.singletonList(integrationDto));
            when(integrationService.update(any(IntegrationDto.class), any(Question.class))).thenReturn(integration);
            when(integrationTokenService.findByToken(anyString())).thenReturn(integrationToken);
            when(integrationTokenService.redeemToken(anyString())).thenReturn(integrationToken);
            when(participantService.refreshParticipants(anyLong(), anyList())).thenReturn(Collections.singletonList(participant));
            when(questionService.getQuestion(anyLong())).thenReturn(question);
            when(questionService.postQuestion(any(QuestionDto.class), anyLong(), anyBoolean(), anyBoolean())).thenReturn(questionDto);
            when(questionService.save(any(Question.class))).thenReturn(question);
            when(resultsOutcomesAverageGradeService.conditions(any(Experiment.class), anyList(), anyList(), anyMap(), anyList(), anyMap(), anyList())).thenReturn(outcomesConditions);
            when(resultsOutcomesAverageGradeService.exposures(anyList(), anyList(), anyMap(), anyList(), anyList())).thenReturn(outcomesExposures);
            when(resultsOutcomesService.outcomes(any(Experiment.class), any(ResultsOutcomesRequestDto.class))).thenReturn(resultsOutcomesDto);
            when(resultsOverviewService.overview(any(Experiment.class), any(SecuredInfo.class))).thenReturn(resultsOverviewDto);
            when(resultsOutcomesTimeOnTaskService.conditions(any(Experiment.class), anyList(), anyList(), anyMap(), anyList(), anyMap(), anyList())).thenReturn(outcomesConditions);
            when(resultsOutcomesTimeOnTaskService.exposures(any(Experiment.class), anyList(), anyList(), anyMap(), anyList(), anyList())).thenReturn(outcomesExposures);
            when(submissionService.getScoreFromMultipleSubmissions(any(Participant.class), any(Assessment.class))).thenReturn(1F);
            when(submissionService.getSubmissionScore(any(Submission.class))).thenReturn(1F);
        } catch (Exception e) {
            log.error("Exception occurred in BaseServiceTest setup()", e);
        }
    }

}
