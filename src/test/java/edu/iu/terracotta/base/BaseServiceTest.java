package edu.iu.terracotta.base;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyBoolean;
import static org.mockito.ArgumentMatchers.anyInt;
import static org.mockito.ArgumentMatchers.anyList;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.ArgumentMatchers.anyMap;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.when;

import java.util.Collections;
import java.util.Optional;
import java.util.UUID;

import org.mockito.Mock;
import edu.iu.terracotta.model.LtiContextEntity;
import edu.iu.terracotta.model.LtiUserEntity;
import edu.iu.terracotta.model.PlatformDeployment;
import edu.iu.terracotta.model.app.Assessment;
import edu.iu.terracotta.model.app.Assignment;
import edu.iu.terracotta.model.app.Experiment;
import edu.iu.terracotta.model.app.Participant;
import edu.iu.terracotta.model.app.Question;
import edu.iu.terracotta.model.app.RegradeDetails;
import edu.iu.terracotta.model.app.Submission;
import edu.iu.terracotta.model.app.Treatment;
import edu.iu.terracotta.model.app.dto.AnswerDto;
import edu.iu.terracotta.model.app.dto.QuestionDto;
import edu.iu.terracotta.model.app.dto.dashboard.results.outcomes.request.ResultsOutcomesRequestDto;
import edu.iu.terracotta.model.app.integrations.Integration;
import edu.iu.terracotta.model.app.integrations.IntegrationClient;
import edu.iu.terracotta.model.app.integrations.IntegrationConfiguration;
import edu.iu.terracotta.model.app.integrations.dto.IntegrationClientDto;
import edu.iu.terracotta.model.app.integrations.dto.IntegrationConfigurationDto;
import edu.iu.terracotta.model.app.integrations.dto.IntegrationDto;
import edu.iu.terracotta.model.oauth2.LTIToken;
import edu.iu.terracotta.model.oauth2.SecuredInfo;
import edu.iu.terracotta.service.app.APIJWTService;
import edu.iu.terracotta.service.app.AnswerService;
import edu.iu.terracotta.service.app.AnswerSubmissionService;
import edu.iu.terracotta.service.app.AssessmentService;
import edu.iu.terracotta.service.app.AssessmentSubmissionService;
import edu.iu.terracotta.service.app.AssignmentService;
import edu.iu.terracotta.service.app.AssignmentTreatmentService;
import edu.iu.terracotta.service.app.ExperimentService;
import edu.iu.terracotta.service.app.ExposureService;
import edu.iu.terracotta.service.app.FileStorageService;
import edu.iu.terracotta.service.app.GroupParticipantService;
import edu.iu.terracotta.service.app.GroupService;
import edu.iu.terracotta.service.app.OutcomeScoreService;
import edu.iu.terracotta.service.app.OutcomeService;
import edu.iu.terracotta.service.app.ParticipantService;
import edu.iu.terracotta.service.app.QuestionService;
import edu.iu.terracotta.service.app.QuestionSubmissionCommentService;
import edu.iu.terracotta.service.app.QuestionSubmissionService;
import edu.iu.terracotta.service.app.SubmissionService;
import edu.iu.terracotta.service.app.TreatmentService;
import edu.iu.terracotta.service.app.dashboard.results.ResultsOutcomesAverageGradeService;
import edu.iu.terracotta.service.app.dashboard.results.ResultsOutcomesService;
import edu.iu.terracotta.service.app.dashboard.results.ResultsOutcomesTimeOnTaskService;
import edu.iu.terracotta.service.app.dashboard.results.ResultsOverviewService;
import edu.iu.terracotta.service.app.integrations.IntegrationClientService;
import edu.iu.terracotta.service.app.integrations.IntegrationConfigurationService;
import edu.iu.terracotta.service.app.integrations.IntegrationLaunchParameterService;
import edu.iu.terracotta.service.app.integrations.IntegrationLaunchService;
import edu.iu.terracotta.service.app.integrations.IntegrationScoreAsyncService;
import edu.iu.terracotta.service.app.integrations.IntegrationScoreService;
import edu.iu.terracotta.service.app.integrations.IntegrationService;
import edu.iu.terracotta.service.app.integrations.IntegrationTokenService;
import edu.iu.terracotta.service.aws.AWSService;
import edu.iu.terracotta.service.caliper.CaliperService;
import edu.iu.terracotta.service.canvas.CanvasAPIClient;
import edu.iu.terracotta.service.canvas.CanvasAPIScopeService;
import edu.iu.terracotta.service.lti.AdvantageAGSService;
import edu.iu.terracotta.service.lti.AdvantageMembershipService;
import edu.iu.terracotta.service.lti.LTIDataService;
import lombok.extern.slf4j.Slf4j;

@Slf4j
public class BaseServiceTest extends BaseRepositoryTest {

    @Mock protected AdvantageAGSService advantageAGSService;
    @Mock protected AdvantageMembershipService advantageMembershipService;
    @Mock protected AnswerService answerService;
    @Mock protected AnswerSubmissionService answerSubmissionService;
    @Mock protected APIJWTService apijwtService;
    @Mock protected AssessmentService assessmentService;
    @Mock protected AssessmentSubmissionService assessmentSubmissionService;
    @Mock protected AssignmentService assignmentService;
    @Mock protected AssignmentTreatmentService assignmentTreatmentService;
    @Mock protected AWSService awsService;
    @Mock protected CaliperService caliperService;
    @Mock protected CanvasAPIClient canvasAPIClient;
    @Mock protected CanvasAPIScopeService canvasAPIScopeService;
    @Mock protected ExperimentService experimentService;
    @Mock protected ExposureService exposureService;
    @Mock protected FileStorageService fileStorageService;
    @Mock protected GroupParticipantService groupParticipantService;
    @Mock protected GroupService groupService;
    @Mock protected IntegrationClientService integrationClientService;
    @Mock protected IntegrationConfigurationService integrationConfigurationService;
    @Mock protected IntegrationLaunchParameterService integrationLaunchParameterService;
    @Mock protected IntegrationLaunchService integrationLaunchService;
    @Mock protected IntegrationScoreAsyncService integrationScoreAsyncService;
    @Mock protected IntegrationScoreService integrationScoreService;
    @Mock protected IntegrationService integrationService;
    @Mock protected IntegrationTokenService integrationTokenService;
    @Mock protected LTIDataService ltiDataService;
    @Mock protected OutcomeScoreService outcomeScoreService;
    @Mock protected OutcomeService outcomeService;
    @Mock protected ParticipantService participantService;
    @Mock protected QuestionService questionService;
    @Mock protected QuestionSubmissionCommentService questionSubmissionCommentService;
    @Mock protected QuestionSubmissionService questionSubmissionService;
    @Mock protected ResultsOutcomesAverageGradeService resultsOutcomesAverageGradeService;
    @Mock protected ResultsOutcomesService resultsOutcomesService;
    @Mock protected ResultsOverviewService resultsOverviewService;
    @Mock protected ResultsOutcomesTimeOnTaskService resultsOutcomesTimeOnTaskService;
    @Mock protected SubmissionService submissionService;
    @Mock protected TreatmentService treatmentService;

    public void setup() {
        try {
            super.setup();

            when(advantageAGSService.getLineItems(any(LTIToken.class), any(LtiContextEntity.class))).thenReturn(lineItems);
            when(advantageAGSService.getToken(anyString(), any(PlatformDeployment.class))).thenReturn(ltiToken);
            when(advantageMembershipService.callMembershipService(any(LTIToken.class), any(LtiContextEntity.class))).thenReturn(courseUsers);
            when(advantageMembershipService.getToken(any(PlatformDeployment.class))).thenReturn(ltiToken);
            when(answerService.postAnswerMC(any(AnswerDto.class), anyLong())).thenReturn(answerDto);
            when(apijwtService.isTestStudent(any(SecuredInfo.class))).thenReturn(false);
            when(apijwtService.unsecureToken(anyString())).thenReturn(jwt);
            when(assessmentSubmissionService.calculateMaxScore(any(Assessment.class))).thenReturn(1F);
            when(assessmentSubmissionService.gradeSubmission(any(Submission.class), any(RegradeDetails.class))).thenReturn(submission);
            when(assignmentService.getCanvasAssignmentById(anyInt(), any(SecuredInfo.class))).thenReturn(Optional.of(assignmentExtended));
            when(assignmentService.save(any(Assignment.class))).thenReturn(assignment);
            when(assignmentTreatmentService.toAssignmentDto(any(Assignment.class), anyBoolean(), anyBoolean())).thenReturn(assignmentDto);
            when(assignmentTreatmentService.toTreatmentDto(any(Treatment.class), anyBoolean(), anyBoolean())).thenReturn(treatmentDto);
            when(canvasAPIClient.listAssignment(any(LtiUserEntity.class), anyString(), anyLong())).thenReturn(Optional.of(assignmentExtended));
            when(canvasAPIClient.listAssignments(any(LtiUserEntity.class), anyString())).thenReturn(Collections.singletonList(assignmentExtended));
            when(canvasAPIClient.listSubmissions(any(LtiUserEntity.class), anyLong(), anyString())).thenReturn(Collections.singletonList(submissionCanvas));
            when(groupParticipantService.getUniqueGroupByConditionId(anyLong(), anyString(), anyLong())).thenReturn(group);
            when(groupParticipantService.nextGroup(any(Experiment.class))).thenReturn(group);
            when(integrationClientService.fromDto(any(IntegrationClientDto.class))).thenReturn(integrationClient);
            when(integrationClientService.getAll()).thenReturn(Collections.singletonList(integrationClient));
            when(integrationClientService.toDto(any(IntegrationClient.class), anyString())).thenReturn(integrationClientDto);
            when(integrationClientService.toDto(anyList(), anyString())).thenReturn(Collections.singletonList(integrationClientDto));
            when(integrationConfigurationService.create(any(Integration.class), any(UUID.class))).thenReturn(integrationConfiguration);
            when(integrationConfigurationService.fromDto(any(IntegrationConfigurationDto.class), any(IntegrationConfiguration.class))).thenReturn(integrationConfiguration);
            when(integrationConfigurationService.toDto(any(IntegrationConfiguration.class))).thenReturn(integrationConfigurationDto);
            when(integrationConfigurationService.update(any(IntegrationConfigurationDto.class), any(Integration.class))).thenReturn(integrationConfiguration);
            when(integrationLaunchParameterService.buildQueryString(any(Submission.class), anyInt())).thenReturn("?a=1&b=2");
            when(integrationScoreService.getPreviewTokenClient(anyString())).thenReturn(Optional.of(INTEGRATION_CLIENT_NAME));
            when(integrationService.create(any(Question.class), any(UUID.class))).thenReturn(integration);
            when(integrationService.findByUuid(any(UUID.class))).thenReturn(integration);
            when(integrationService.fromDto(any(IntegrationDto.class), any(Integration.class))).thenReturn(integration);
            when(integrationService.toDto(any(Integration.class))).thenReturn(integrationDto);
            when(integrationService.toDto(anyList())).thenReturn(Collections.singletonList(integrationDto));
            when(integrationService.update(any(IntegrationDto.class), any(Question.class))).thenReturn(integration);
            when(integrationTokenService.findByToken(anyString())).thenReturn(integrationToken);
            when(integrationTokenService.redeemToken(anyString())).thenReturn(integrationToken);
            when(participantService.refreshParticipants(anyLong(), anyList())).thenReturn(Collections.singletonList(participant));
            when(questionService.getQuestion(anyLong())).thenReturn(question);
            when(questionService.postQuestion(any(QuestionDto.class), anyLong(), anyBoolean(), anyBoolean())).thenReturn(questionDto);
            when(questionService.save(any(Question.class))).thenReturn(question);
            when(resultsOutcomesAverageGradeService.conditions(any(Experiment.class), anyList(), anyList(), anyMap(), anyList(), anyMap(), anyList())).thenReturn(outcomesConditions);
            when(resultsOutcomesAverageGradeService.exposures(anyList(), anyList(), anyMap(), anyList(), anyList())).thenReturn(outcomesExposures);
            when(resultsOutcomesService.outcomes(any(Experiment.class), any(ResultsOutcomesRequestDto.class))).thenReturn(resultsOutcomesDto);
            when(resultsOverviewService.overview(any(Experiment.class), any(SecuredInfo.class))).thenReturn(resultsOverviewDto);
            when(resultsOutcomesTimeOnTaskService.conditions(any(Experiment.class), anyList(), anyList(), anyMap(), anyList(), anyMap(), anyList())).thenReturn(outcomesConditions);
            when(resultsOutcomesTimeOnTaskService.exposures(any(Experiment.class), anyList(), anyList(), anyMap(), anyList(), anyList())).thenReturn(outcomesExposures);
            when(submissionService.getScoreFromMultipleSubmissions(any(Participant.class), any(Assessment.class))).thenReturn(1F);
            when(submissionService.getSubmissionScore(any(Submission.class))).thenReturn(1F);
        } catch (Exception e) {
            log.error("Exception occurred in BaseServiceTest setup()", e);
        }
    }

}
