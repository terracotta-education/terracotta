package edu.iu.terracotta.base;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyBoolean;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.when;

import java.util.Collections;
import java.util.Optional;
import java.util.UUID;

import org.mockito.Mock;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import edu.iu.terracotta.model.LtiUserEntity;
import edu.iu.terracotta.model.app.AnswerMc;
import edu.iu.terracotta.model.app.Assessment;
import edu.iu.terracotta.model.app.Assignment;
import edu.iu.terracotta.model.app.Outcome;
import edu.iu.terracotta.model.app.Participant;
import edu.iu.terracotta.model.app.Question;
import edu.iu.terracotta.model.app.QuestionMc;
import edu.iu.terracotta.model.app.QuestionSubmission;
import edu.iu.terracotta.model.app.Submission;
import edu.iu.terracotta.model.app.Treatment;
import edu.iu.terracotta.model.app.integrations.Integration;
import edu.iu.terracotta.model.app.integrations.IntegrationConfiguration;
import edu.iu.terracotta.model.app.integrations.IntegrationToken;
import edu.iu.terracotta.repository.AnswerEssaySubmissionRepository;
import edu.iu.terracotta.repository.AnswerFileSubmissionRepository;
import edu.iu.terracotta.repository.AnswerMcRepository;
import edu.iu.terracotta.repository.AnswerMcSubmissionOptionRepository;
import edu.iu.terracotta.repository.AnswerMcSubmissionRepository;
import edu.iu.terracotta.repository.AssessmentRepository;
import edu.iu.terracotta.repository.AssignmentRepository;
import edu.iu.terracotta.repository.CanvasAPIOAuthSettingsRepository;
import edu.iu.terracotta.repository.CanvasAPIScopeRepository;
import edu.iu.terracotta.repository.CanvasAPITokenRepository;
import edu.iu.terracotta.repository.ConditionRepository;
import edu.iu.terracotta.repository.ConsentDocumentRepository;
import edu.iu.terracotta.repository.EventRepository;
import edu.iu.terracotta.repository.ExperimentRepository;
import edu.iu.terracotta.repository.ExposureGroupConditionRepository;
import edu.iu.terracotta.repository.ExposureRepository;
import edu.iu.terracotta.repository.GroupRepository;
import edu.iu.terracotta.repository.LtiUserRepository;
import edu.iu.terracotta.repository.OutcomeRepository;
import edu.iu.terracotta.repository.OutcomeScoreRepository;
import edu.iu.terracotta.repository.ParticipantRepository;
import edu.iu.terracotta.repository.PlatformDeploymentRepository;
import edu.iu.terracotta.repository.QuestionMcRepository;
import edu.iu.terracotta.repository.QuestionRepository;
import edu.iu.terracotta.repository.QuestionSubmissionCommentRepository;
import edu.iu.terracotta.repository.QuestionSubmissionRepository;
import edu.iu.terracotta.repository.SubmissionRepository;
import edu.iu.terracotta.repository.TreatmentRepository;
import edu.iu.terracotta.repository.integrations.AnswerIntegrationSubmissionRepository;
import edu.iu.terracotta.repository.integrations.IntegrationClientRepository;
import edu.iu.terracotta.repository.integrations.IntegrationConfigurationRepository;
import edu.iu.terracotta.repository.integrations.IntegrationRepository;
import edu.iu.terracotta.repository.integrations.IntegrationTokenLogRepository;
import edu.iu.terracotta.repository.integrations.IntegrationTokenRepository;
import lombok.extern.slf4j.Slf4j;

@Slf4j
public class BaseRepositoryTest extends BaseModelTest {

    @Mock protected AnswerEssaySubmissionRepository answerEssaySubmissionRepository;
    @Mock protected AnswerFileSubmissionRepository answerFileSubmissionRepository;
    @Mock protected AnswerIntegrationSubmissionRepository answerIntegrationSubmissionRepository;
    @Mock protected AnswerMcRepository answerMcRepository;
    @Mock protected AnswerMcSubmissionOptionRepository answerMcSubmissionOptionRepository;
    @Mock protected AnswerMcSubmissionRepository answerMcSubmissionRepository;
    @Mock protected AssessmentRepository assessmentRepository;
    @Mock protected AssignmentRepository assignmentRepository;
    @Mock protected CanvasAPIScopeRepository canvasAPIScopeRepository;
    @Mock protected CanvasAPITokenRepository canvasAPITokenRepository;
    @Mock protected CanvasAPIOAuthSettingsRepository canvasAPIOAuthSettingsRepository;
    @Mock protected ConditionRepository conditionRepository;
    @Mock protected ConsentDocumentRepository consentDocumentRepository;
    @Mock protected EventRepository eventRepository;
    @Mock protected ExperimentRepository experimentRepository;
    @Mock protected ExposureRepository exposureRepository;
    @Mock protected ExposureGroupConditionRepository exposureGroupConditionRepository;
    @Mock protected GroupRepository groupRepository;
    @Mock protected IntegrationClientRepository integrationClientRepository;
    @Mock protected IntegrationConfigurationRepository integrationConfigurationRepository;
    @Mock protected IntegrationRepository integrationRepository;
    @Mock protected IntegrationTokenLogRepository integrationTokenLogRepository;
    @Mock protected IntegrationTokenRepository integrationTokenRepository;
    @Mock protected LtiUserRepository ltiUserRepository;
    @Mock protected OutcomeRepository outcomeRepository;
    @Mock protected OutcomeScoreRepository outcomeScoreRepository;
    @Mock protected ParticipantRepository participantRepository;
    @Mock protected PlatformDeploymentRepository platformDeploymentRepository;
    @Mock protected QuestionMcRepository questionMcRepository;
    @Mock protected QuestionRepository questionRepository;
    @Mock protected QuestionSubmissionCommentRepository questionSubmissionCommentRepository;
    @Mock protected QuestionSubmissionRepository questionSubmissionRepository;
    @Mock protected SubmissionRepository submissionRepository;
    @Mock protected TreatmentRepository treatmentRepository;

    public void setup() {
        try {
            super.setup();

            when(answerIntegrationSubmissionRepository.existsByQuestionSubmission_QuestionSubmissionIdAndId(anyLong(), anyLong())).thenReturn(true);
            when(answerIntegrationSubmissionRepository.findByQuestionSubmission_QuestionSubmissionId(anyLong())).thenReturn(Collections.singletonList(answerIntegrationSubmission));
            when(answerMcRepository.save(any(AnswerMc.class))).thenReturn(answerMc);
            when(answerEssaySubmissionRepository.findByQuestionSubmission_QuestionSubmissionId(anyLong())).thenReturn(Collections.singletonList(answerEssaySubmission));
            when(answerMcSubmissionRepository.findByQuestionSubmission_QuestionSubmissionId(anyLong())).thenReturn(Collections.singletonList(answerMcSubmission));
            when(assessmentRepository.findByAssessmentId(anyLong())).thenReturn(assessment);
            when(assessmentRepository.findById(anyLong())).thenReturn(Optional.of(assessment));
            when(assessmentRepository.save(any(Assessment.class))).thenReturn(assessment);
            when(assignmentRepository.findByAssignmentId(anyLong())).thenReturn(assignment);
            when(assignmentRepository.findByExposure_Experiment_ExperimentId(anyLong())).thenReturn(Collections.singletonList(assignment));
            when(assignmentRepository.findByExposure_Experiment_ExperimentIdAndLmsAssignmentId(anyLong(), anyString())).thenReturn(assignment);
            when(assignmentRepository.findByExposure_ExposureIdAndSoftDeleted(anyLong(), anyBoolean())).thenReturn(Collections.singletonList(assignment));
            when(assignmentRepository.findById(anyLong())).thenReturn(Optional.of(assignment));
            when(assignmentRepository.getReferenceById(anyLong())).thenReturn(assignment);
            when(assignmentRepository.save(any(Assignment.class))).thenReturn(assignment);
            when(assignmentRepository.saveAndFlush(any(Assignment.class))).thenReturn(assignment);
            when(conditionRepository.findByExperiment_ExperimentId(anyLong())).thenReturn(Collections.singletonList(condition));
            when(canvasAPIScopeRepository.findAll()).thenReturn(Collections.singletonList(canvasAPIScope));
            when(canvasAPIScopeRepository.findById(anyLong())).thenReturn(Optional.of(canvasAPIScope));
            when(canvasAPIScopeRepository.findByUuid(any(UUID.class))).thenReturn(Optional.of(canvasAPIScope));
            when(canvasAPITokenRepository.findByUser(any(LtiUserEntity.class))).thenReturn(Optional.of(canvasAPITokenEntity));
            when(conditionRepository.findById(anyLong())).thenReturn(Optional.of(condition));
            when(experimentRepository.findByExperimentId(anyLong())).thenReturn(experiment);
            when(experimentRepository.findById(anyLong())).thenReturn(Optional.of(experiment));
            when(exposureGroupConditionRepository.findByCondition_Experiment_ExperimentId(anyLong())).thenReturn(Collections.singletonList(exposureGroupCondition));
            when(exposureGroupConditionRepository.findByExposure_ExposureId(anyLong())).thenReturn(Collections.singletonList(exposureGroupCondition));
            when(exposureGroupConditionRepository.findByGroup_GroupId(anyLong())).thenReturn(Collections.singletonList(exposureGroupCondition));
            when(exposureGroupConditionRepository.getByCondition_ConditionIdAndExposure_ExposureId(anyLong(), anyLong())).thenReturn(Optional.of(exposureGroupCondition));
            when(exposureRepository.findByExperiment_ExperimentId(anyLong())).thenReturn(Collections.singletonList(exposure));
            when(exposureRepository.findByExposureId(anyLong())).thenReturn(exposure);
            when(exposureRepository.findById(anyLong())).thenReturn(Optional.of(exposure));
            when(groupRepository.findByExperiment_ExperimentId(anyLong())).thenReturn(Collections.singletonList(group));
            when(groupRepository.getReferenceById(anyLong())).thenReturn(group);
            when(integrationConfigurationRepository.findById(anyLong())).thenReturn(Optional.of(integrationConfiguration));
            when(integrationConfigurationRepository.save(any(IntegrationConfiguration.class))).thenReturn(integrationConfiguration);
            when(integrationConfigurationRepository.saveAndFlush(any(IntegrationConfiguration.class))).thenReturn(integrationConfiguration);
            when(integrationClientRepository.findByUuid(any(UUID.class))).thenReturn(Optional.of(integrationClient));
            when(integrationClientRepository.findByPreviewToken(anyString())).thenReturn(Optional.of(integrationClient));
            when(integrationClientRepository.getAllByEnabled(anyBoolean())).thenReturn(Collections.singletonList(integrationClient));
            when(integrationRepository.existsByUuidAndQuestion_QuestionId(any(UUID.class), anyLong())).thenReturn(true);
            when(integrationRepository.findById(anyLong())).thenReturn(Optional.of(integration));
            when(integrationRepository.findByUuid(any(UUID.class))).thenReturn(Optional.of(integration));
            when(integrationRepository.save(any(Integration.class))).thenReturn(integration);
            when(integrationRepository.saveAndFlush(any(Integration.class))).thenReturn(integration);
            when(integrationTokenLogRepository.findAllByIntegrationToken_Id(anyLong())).thenReturn(Collections.singletonList(integrationTokenLog));
            when(integrationTokenLogRepository.findByCode(anyString())).thenReturn(Optional.of(integrationTokenLog));
            when(integrationTokenRepository.findByToken(anyString())).thenReturn(Optional.of(integrationToken));
            when(integrationTokenRepository.save(any(IntegrationToken.class))).thenReturn(integrationToken);
            when(integrationTokenRepository.saveAndFlush(any(IntegrationToken.class))).thenReturn(integrationToken);
            when(ltiUserRepository.findById(anyLong())).thenReturn(Optional.of(ltiUserEntity));
            when(ltiUserRepository.findByUserKeyAndPlatformDeployment_KeyId(anyString(), anyLong())).thenReturn(ltiUserEntity);
            when(outcomeRepository.findByExposure_Experiment_ExperimentId(anyLong(), any(Pageable.class))).thenReturn(new PageImpl<>(Collections.singletonList(outcome)));
            when(outcomeRepository.findByExposure_Experiment_ExperimentId(anyLong())).thenReturn(Collections.singletonList(outcome));
            when(outcomeRepository.findByExposure_ExposureId(anyLong())).thenReturn(Collections.singletonList(outcome));
            when(outcomeRepository.findById(anyLong())).thenReturn(Optional.of(outcome));
            when(outcomeRepository.findByOutcomeId(anyLong())).thenReturn(outcome);
            when(outcomeRepository.save(any(Outcome.class))).thenReturn(outcome);
            when(outcomeScoreRepository.findByOutcome_OutcomeId(anyLong())).thenReturn(Collections.singletonList(outcomeScore));
            when(participantRepository.countByGroup_GroupId(anyLong())).thenReturn(1L);
            when(participantRepository.findByExperiment_ExperimentId(anyLong())).thenReturn(Collections.singletonList(participant));
            when(participantRepository.findByExperiment_ExperimentIdAndLtiUserEntity_UserKey(anyLong(), anyString())).thenReturn(participant);
            when(participantRepository.findById(anyLong())).thenReturn(Optional.of(participant));
            when(participantRepository.findByParticipantId(anyLong())).thenReturn(participant);
            when(participantRepository.save(any(Participant.class))).thenReturn(participant);
            when(platformDeploymentRepository.getReferenceById(anyLong())).thenReturn(platformDeployment);
            when(questionRepository.findByQuestionId(anyLong())).thenReturn(question);
            when(questionRepository.save(any(Question.class))).thenReturn(question);
            when(questionRepository.save(any(QuestionMc.class))).thenReturn(questionMc);
            when(questionSubmissionRepository.save(any(QuestionSubmission.class))).thenReturn(questionSubmission);
            when(submissionRepository.findById(anyLong())).thenReturn(Optional.of(submission));
            when(submissionRepository.findByParticipant_ParticipantId(anyLong())).thenReturn(Collections.singletonList(submission));
            when(submissionRepository.findByParticipant_ParticipantIdAndAssessment_AssessmentId(anyLong(), anyLong())).thenReturn(Collections.singletonList(submission));
            when(submissionRepository.findBySubmissionId(anyLong())).thenReturn(submission);
            when(submissionRepository.save(any(Submission.class))).thenReturn(submission);
            when(treatmentRepository.findByAssignment_AssignmentId(anyLong())).thenReturn(Collections.singletonList(treatment));
            when(treatmentRepository.findByCondition_ConditionIdAndAssignment_AssignmentId(anyLong(), anyLong())).thenReturn(Collections.singletonList(treatment));
            when(treatmentRepository.findByCondition_Experiment_ExperimentId(anyLong())).thenReturn(Collections.singletonList(treatment));
            when(treatmentRepository.findById(anyLong())).thenReturn(Optional.of(treatment));
            when(treatmentRepository.findByTreatmentId(anyLong())).thenReturn(treatment);
            when(treatmentRepository.save(any(Treatment.class))).thenReturn(treatment);
            when(treatmentRepository.saveAndFlush(any(Treatment.class))).thenReturn(treatment);
        } catch (Exception e) {
            log.error("Exception occurred in BaseRepositoryTest setup()", e);
        }
    }

}
